
import config 
import os
import common.cognitive_search as cognitive_search


azure_search_client = cognitive_search.AzureSearch(
        os.getenv('TF_VAR_SEARCH_SERVICE_NAME')
        , os.getenv('SEARCH_SERVICE_API_KEY')
        , config['index_name']
    )


def simple_search(search_text):
    print("--------")
    print("Simple Search")
    results =  azure_search_client.simple_query(search_text="*", include_total_count=True)

    print ('Total Documents Matching Query:', results.get_count())
    for result in results:
        print("{}: {}".format(result["HotelId"], result["HotelName"]))

def search_and_select(search_text, select_fields):
    print("--------")
    print("Simple Search and Select")
    results =  azure_search_client.simple_query(search_text="677", select='HotelId,HotelName,Tags', include_total_count=True)
    print ('Total Documents Matching Query:', results.get_count())
    for result in results:
        print("{}: {}: {}".format(result["HotelId"], result["HotelName"], result["Tags"]))

def search_select_filter():
    print("--------")
    print("Search, Select and Filter")
    results = azure_search_client.simple_query(search_text="hotels", select='HotelId,HotelName,Rating', filter='Rating gt 4', order_by='Rating desc')
    for result in results:
        print("{}: {} - {} rating".format(result["HotelId"], result["HotelName"], result["Rating"]))

def search_fields(search_text, fields):
    print("--------")
    print("Search in Specified Fields and Select")
    results =  azure_search_client.simple_query(search_text="sublime", search_fields=['HotelName'], select='HotelId,HotelName')

    for result in results:
        print("{}: {}".format(result["HotelId"], result["HotelName"]))

def facets_search():
    print("--------")
    print("Facets = Filter by X and Return X and Count of X's")

    results = azure_search_client.simple_query(search_text="*", facets=["Category"])

    facets = results.get_facets()
    for facet in facets["Category"]:
        print("    {}".format(facet))

def get_document_by_key(key):
    print("--------")
    print("Get Document")
    result = azure_search_client.get_document(key="3")

    print(result)
    print("Details for hotel '3' are:")
    print("        Name: {}".format(result["HotelName"]))
    print("      Rating: {}".format(result["Rating"]))
    print("    Category: {}".format(result["Category"]))

def autocomplete():
    print("--------")
    print("Autocomplete")
    search_suggestion = 'sa'
    results = azure_search_client.autocomplete(search_text=search_suggestion, suggester_name="sg", mode='twoTerms')

    print("Autocomplete for:", search_suggestion)
    for result in results:
        print (result['text'])

def bm25_search():
    print("--------")
    print("Simple BM25 Search")

    """
    The previous query used an empty search string, which bypasses the search engine. 
    In this query, search for "what hotel has a good restaurant on site". 
    The query string undergoes lexical analysis and tokenization.
    The search engine scans for matches and assigns a search score based on term frequency and proximity. 
    Higher scoring matches are returned first. In this query for "what hotel has a good restaurant on site", Sublime Cliff Hotel comes out on top because it's description includes "site". 
    Terms that occur infrequently raise the search score of the document.
    """
    results =  azure_search_client.simple_query(
        search_text="what hotel has a good restaurant on site" ,
        select='HotelName,HotelId,Description')

    for result in results:
        print(result["@search.score"])
        print(result["HotelName"])
        print(f"Description: {result['Description']}")

def semantic_search():
    # print("--------")
    # print("Semantic Query")
    """
    Here's the same query, but with semantic ranking. 
    Notice that the semantic ranker correctly identifies Triple Landscape Hotel as a more relevant result given the initial query. 
    This query also returns captions generated by the models. 
    The inputs are too minimal in this sample to create interesting captions, but the example succeeds in demonstrating the syntax.
    https://learn.microsoft.com/en-us/azure/search/semantic-search-overview
    https://learn.microsoft.com/en-us/azure/search/semantic-how-to-query-request?tabs=portal%2Cportal-query
    """
    # results =  azure_search_client.semantic_query(
    #     search_text="what hotel has a good restaurant on site", 
    #     select='HotelName,Description,Category', query_caption='extractive',
    #     semantic_configuration_name='my-semantic-config')

    # for result in results:
    #     print(result["@search.reranker_score"])
    #     print(result["HotelName"])
    #     print(f"Description: {result['Description']}")
        
    #     captions = result["@search.captions"]
    #     if captions:
    #         caption = captions[0]
    #         if caption.highlights:
    #             print(f"Caption: {caption.highlights}\n")
    #         else:
    #             print(f"Caption: {caption.text}\n")


if __name__ == "__main__":
    config_directory=os.getenv('INDEX_CONFIG_PATH')
    config=load_config(config_directory)

    azure_search_client = cognitive_search.AzureIndexSearch(
            os.getenv('TF_VAR_SEARCH_SERVICE_NAME')
            , os.getenv('SEARCH_SERVICE_API_KEY')
        )
    
    simple_search()